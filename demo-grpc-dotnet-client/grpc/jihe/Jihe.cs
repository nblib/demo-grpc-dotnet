// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: jihe.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Jihe {

  /// <summary>Holder for reflection information generated from jihe.proto</summary>
  public static partial class JiheReflection {

    #region Descriptor
    /// <summary>File descriptor for jihe.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static JiheReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpqaWhlLnByb3RvEgRqaWhlIi4KA0NhchIKCgJpZBgBIAEoBRIMCgRuYW1l",
            "GAIgASgJEg0KBWNvbG9yGAMgASgJIiEKB0xpc3RDYXISFgoDY2FyGAEgAygL",
            "MgkuamloZS5DYXIiZgoGTWFwQ2FyEiQKBGNhcnMYASADKAsyFi5qaWhlLk1h",
            "cENhci5DYXJzRW50cnkaNgoJQ2Fyc0VudHJ5EgsKA2tleRgBIAEoBRIYCgV2",
            "YWx1ZRgCIAEoCzIJLmppaGUuQ2FyOgI4ATI7CgtKaWhlU2VydmljZRIsCg10",
            "cmFuc2ZlclRvTWFwEg0uamloZS5MaXN0Q2FyGgwuamloZS5NYXBDYXJCFQoR",
            "ZGVtby5oZXdlLmlvLmppaGVQAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Jihe.Car), global::Jihe.Car.Parser, new[]{ "Id", "Name", "Color" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jihe.ListCar), global::Jihe.ListCar.Parser, new[]{ "Car" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Jihe.MapCar), global::Jihe.MapCar.Parser, new[]{ "Cars" }, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Car : pb::IMessage<Car> {
    private static readonly pb::MessageParser<Car> _parser = new pb::MessageParser<Car>(() => new Car());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Car> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jihe.JiheReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Car() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Car(Car other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      color_ = other.color_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Car Clone() {
      return new Car(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "color" field.</summary>
    public const int ColorFieldNumber = 3;
    private string color_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Color {
      get { return color_; }
      set {
        color_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Car);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Car other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Color != other.Color) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Color.Length != 0) hash ^= Color.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Color.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Color);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Color.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Color);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Car other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Color.Length != 0) {
        Color = other.Color;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Color = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///list
  /// </summary>
  public sealed partial class ListCar : pb::IMessage<ListCar> {
    private static readonly pb::MessageParser<ListCar> _parser = new pb::MessageParser<ListCar>(() => new ListCar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ListCar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jihe.JiheReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCar(ListCar other) : this() {
      car_ = other.car_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ListCar Clone() {
      return new ListCar(this);
    }

    /// <summary>Field number for the "car" field.</summary>
    public const int CarFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Jihe.Car> _repeated_car_codec
        = pb::FieldCodec.ForMessage(10, global::Jihe.Car.Parser);
    private readonly pbc::RepeatedField<global::Jihe.Car> car_ = new pbc::RepeatedField<global::Jihe.Car>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Jihe.Car> Car {
      get { return car_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ListCar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ListCar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!car_.Equals(other.car_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= car_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      car_.WriteTo(output, _repeated_car_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += car_.CalculateSize(_repeated_car_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ListCar other) {
      if (other == null) {
        return;
      }
      car_.Add(other.car_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            car_.AddEntriesFrom(input, _repeated_car_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///Map
  /// </summary>
  public sealed partial class MapCar : pb::IMessage<MapCar> {
    private static readonly pb::MessageParser<MapCar> _parser = new pb::MessageParser<MapCar>(() => new MapCar());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MapCar> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Jihe.JiheReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapCar() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapCar(MapCar other) : this() {
      cars_ = other.cars_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MapCar Clone() {
      return new MapCar(this);
    }

    /// <summary>Field number for the "cars" field.</summary>
    public const int CarsFieldNumber = 1;
    private static readonly pbc::MapField<int, global::Jihe.Car>.Codec _map_cars_codec
        = new pbc::MapField<int, global::Jihe.Car>.Codec(pb::FieldCodec.ForInt32(8), pb::FieldCodec.ForMessage(18, global::Jihe.Car.Parser), 10);
    private readonly pbc::MapField<int, global::Jihe.Car> cars_ = new pbc::MapField<int, global::Jihe.Car>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<int, global::Jihe.Car> Cars {
      get { return cars_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MapCar);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MapCar other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!Cars.Equals(other.Cars)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= Cars.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      cars_.WriteTo(output, _map_cars_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += cars_.CalculateSize(_map_cars_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MapCar other) {
      if (other == null) {
        return;
      }
      cars_.Add(other.cars_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            cars_.AddEntriesFrom(input, _map_cars_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
