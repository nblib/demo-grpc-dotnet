// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: jihe.proto
// </auto-generated>
#pragma warning disable 1591
#region Designer generated code

using System;
using System.Threading;
using System.Threading.Tasks;
using grpc = global::Grpc.Core;

namespace Jihe {
  /// <summary>
  ///service
  /// </summary>
  public static partial class JiheService
  {
    static readonly string __ServiceName = "jihe.JiheService";

    static readonly grpc::Marshaller<global::Jihe.ListCar> __Marshaller_ListCar = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jihe.ListCar.Parser.ParseFrom);
    static readonly grpc::Marshaller<global::Jihe.MapCar> __Marshaller_MapCar = grpc::Marshallers.Create((arg) => global::Google.Protobuf.MessageExtensions.ToByteArray(arg), global::Jihe.MapCar.Parser.ParseFrom);

    static readonly grpc::Method<global::Jihe.ListCar, global::Jihe.MapCar> __Method_transferToMap = new grpc::Method<global::Jihe.ListCar, global::Jihe.MapCar>(
        grpc::MethodType.Unary,
        __ServiceName,
        "transferToMap",
        __Marshaller_ListCar,
        __Marshaller_MapCar);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Jihe.JiheReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of JiheService</summary>
    public abstract partial class JiheServiceBase
    {
      /// <summary>
      ///将list 类型转换为map类型
      /// </summary>
      /// <param name="request">The request received from the client.</param>
      /// <param name="context">The context of the server-side call handler being invoked.</param>
      /// <returns>The response to send back to the client (wrapped by a task).</returns>
      public virtual global::System.Threading.Tasks.Task<global::Jihe.MapCar> transferToMap(global::Jihe.ListCar request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Client for JiheService</summary>
    public partial class JiheServiceClient : grpc::ClientBase<JiheServiceClient>
    {
      /// <summary>Creates a new client for JiheService</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public JiheServiceClient(grpc::Channel channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for JiheService that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public JiheServiceClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected JiheServiceClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected JiheServiceClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      /// <summary>
      ///将list 类型转换为map类型
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Jihe.MapCar transferToMap(global::Jihe.ListCar request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return transferToMap(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///将list 类型转换为map类型
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The response received from the server.</returns>
      public virtual global::Jihe.MapCar transferToMap(global::Jihe.ListCar request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_transferToMap, null, options, request);
      }
      /// <summary>
      ///将list 类型转换为map类型
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="headers">The initial metadata to send with the call. This parameter is optional.</param>
      /// <param name="deadline">An optional deadline for the call. The call will be cancelled if deadline is hit.</param>
      /// <param name="cancellationToken">An optional token for canceling the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Jihe.MapCar> transferToMapAsync(global::Jihe.ListCar request, grpc::Metadata headers = null, DateTime? deadline = null, CancellationToken cancellationToken = default(CancellationToken))
      {
        return transferToMapAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      /// <summary>
      ///将list 类型转换为map类型
      /// </summary>
      /// <param name="request">The request to send to the server.</param>
      /// <param name="options">The options for the call.</param>
      /// <returns>The call object.</returns>
      public virtual grpc::AsyncUnaryCall<global::Jihe.MapCar> transferToMapAsync(global::Jihe.ListCar request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_transferToMap, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override JiheServiceClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new JiheServiceClient(configuration);
      }
    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(JiheServiceBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_transferToMap, serviceImpl.transferToMap).Build();
    }

  }
}
#endregion
